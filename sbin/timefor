#!/bin/bash
#
# Show an application window or launch the application if no window
# could be found.
#
# Requires xdotool. (http://www.semicomplete.com/projects/xdotool)
#
# To "show" means "switch to the window's desktop, then raise and
# focus the window."
#
# If the --move option is supplied, the window will be moved to the
# current desktop before raising and focusing it.
#
# The method for finding an existing window that is associated with
# the supplied command relies on the assumption that the basename of
# the first word of the command matches either the "name" or "class"
# portion of the window's WM_CLASS property.
#
# See http://bbs.archlinux.org/viewtopic.php?id=80554 for details.
#
# Author: Henning Bekel <h.bekel at googlemail.com>. Inspired by a
# similar script written by Lucas van Staden <lvs at dedmeet.com /
# www.dedmeet.com>

usage () {
    echo "Usage: $(basename $0) [-m|--move] command"
    echo
    echo "       -m, --move : move the window to the current desktop instead of"
    echo "                    switching to the desktop the window is at."
    exit 1
}

# show usage if no arguments were given or --help was requested
[[ $# -eq 0 || "$1" =~ ^(-h|--help)$ ]] && usage

move=0
wid=

# test for --move option
if [[ "$1" =~ ^(-m|--move)$ ]]; then
    move=1
    shift
fi

mapped? () {
    # test wether a window exists whose WM_CLASS name or class
    # property matches the binary name supplied. Not using --title
    # assures we don't switch to some window which happens to contain
    # the binary name as well (i.e. a web browser).

    wid="$(xdotool search --name --class $(basename "$1") | head -1)"
    [[ "$wid" =~ ^[0-9]+$ ]]
}

show () {
    # show the window, that is:
    # 1. move the window to the current desktop if requested
    # 2. switch to the window's desktop, raise and focus

    if [[ move -eq 1 ]]; then
        xdotool set_desktop_for_window $wid $(xdotool get_desktop)
    fi
    xdotool windowactivate $wid &> /dev/null
}

if mapped? "$1"; then
    show
else
    # launch the command in the background and remove it from jobs
    $* &
    disown

    # wait until the window has been created. We'll exit after 10
    # retries to avoid an infinite loop in case the application failed
    # to launch at all.

    retry=10
    until mapped? "$1"; do
        sleep 1
        ((retry-=1))
        [[ retry -eq 0 ]] && exit 1
    done

    # the window may be on a different desktop now, so we'll show it
    # again to either move it here (--move) or switch to it's desktop
    show
fi
